// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef EOS_ODB_HXX
#define EOS_ODB_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <odb/boost/date-time/mysql/gregorian-traits.hxx>
#include <odb/boost/date-time/mysql/posix-time-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "eos.hpp"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/prepared-query.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Stats
  //
  template <>
  struct class_traits< ::eosio::Stats >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::eosio::Stats >
  {
    public:
    typedef ::eosio::Stats object_type;
    typedef ::std::shared_ptr< ::eosio::Stats > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef unsigned int id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Block
  //
  template <>
  struct class_traits< ::eosio::Block >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::eosio::Block >
  {
    public:
    typedef ::eosio::Block object_type;
    typedef ::std::shared_ptr< ::eosio::Block > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::eosio::bytes id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Transaction
  //
  template <>
  struct class_traits< ::eosio::Transaction >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::eosio::Transaction >
  {
    public:
    typedef ::eosio::Transaction object_type;
    typedef ::std::shared_ptr< ::eosio::Transaction > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::eosio::bytes id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // TransactionTrace
  //
  template <>
  struct class_traits< ::eosio::TransactionTrace >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::eosio::TransactionTrace >
  {
    public:
    typedef ::eosio::TransactionTrace object_type;
    typedef ::std::shared_ptr< ::eosio::TransactionTrace > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::eosio::bytes id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Action
  //
  template <>
  struct class_traits< ::eosio::Action >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::eosio::Action >
  {
    public:
    typedef ::eosio::Action object_type;
    typedef ::std::shared_ptr< ::eosio::Action > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // TokenTransfer
  //
  template <>
  struct class_traits< ::eosio::TokenTransfer >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::eosio::TokenTransfer >
  {
    public:
    typedef ::eosio::TokenTransfer object_type;
    typedef ::std::shared_ptr< ::eosio::TokenTransfer > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // Stats
  //
  template <typename A>
  struct query_columns< ::eosio::Stats, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    id_type_;

    static const id_type_ id;

    // tx_count
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    tx_count_type_;

    static const tx_count_type_ tx_count;

    // action_count
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    action_count_type_;

    static const action_count_type_ action_count;

    // context_free_action_count
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    context_free_action_count_type_;

    static const context_free_action_count_type_ context_free_action_count;
  };

  template <typename A>
  const typename query_columns< ::eosio::Stats, id_mysql, A >::id_type_
  query_columns< ::eosio::Stats, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Stats, id_mysql, A >::tx_count_type_
  query_columns< ::eosio::Stats, id_mysql, A >::
  tx_count (A::table_name, "`tx_count`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Stats, id_mysql, A >::action_count_type_
  query_columns< ::eosio::Stats, id_mysql, A >::
  action_count (A::table_name, "`action_count`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Stats, id_mysql, A >::context_free_action_count_type_
  query_columns< ::eosio::Stats, id_mysql, A >::
  context_free_action_count (A::table_name, "`context_free_action_count`", 0);

  template <typename A>
  struct pointer_query_columns< ::eosio::Stats, id_mysql, A >:
    query_columns< ::eosio::Stats, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::eosio::Stats, id_mysql >:
    public access::object_traits< ::eosio::Stats >
  {
    public:
    struct id_image_type
    {
      unsigned int id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      unsigned int id_value;
      my_bool id_null;

      // tx_count_
      //
      unsigned long long tx_count_value;
      my_bool tx_count_null;

      // action_count_
      //
      unsigned long long action_count_value;
      my_bool action_count_null;

      // context_free_action_count_
      //
      unsigned long long context_free_action_count_value;
      my_bool context_free_action_count_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static odb::details::shared_ptr<prepared_query_impl>
    prepare_query (connection&, const char*, const query_base_type&);

    static odb::details::shared_ptr<result_impl>
    execute_query (prepared_query_impl&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::eosio::Stats, id_common >:
    public access::object_traits_impl< ::eosio::Stats, id_mysql >
  {
  };

  // Block
  //
  template <typename A>
  struct query_columns< ::eosio::Block, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::bytes,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    id_type_;

    static const id_type_ id;

    // num
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    num_type_;

    static const num_type_ num;

    // timestamp
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::datetime,
        mysql::id_datetime >::query_type,
      mysql::id_datetime >
    timestamp_type_;

    static const timestamp_type_ timestamp;

    // block
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::bytes,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    block_type_;

    static const block_type_ block;

    // tx_count
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint32_t,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    tx_count_type_;

    static const tx_count_type_ tx_count;

    // action_count
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint32_t,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    action_count_type_;

    static const action_count_type_ action_count;

    // context_free_action_count
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint32_t,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    context_free_action_count_type_;

    static const context_free_action_count_type_ context_free_action_count;

    // created_at
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::datetime,
        mysql::id_datetime >::query_type,
      mysql::id_datetime >
    created_at_type_;

    static const created_at_type_ created_at;
  };

  template <typename A>
  const typename query_columns< ::eosio::Block, id_mysql, A >::id_type_
  query_columns< ::eosio::Block, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Block, id_mysql, A >::num_type_
  query_columns< ::eosio::Block, id_mysql, A >::
  num (A::table_name, "`num`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Block, id_mysql, A >::timestamp_type_
  query_columns< ::eosio::Block, id_mysql, A >::
  timestamp (A::table_name, "`timestamp`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Block, id_mysql, A >::block_type_
  query_columns< ::eosio::Block, id_mysql, A >::
  block (A::table_name, "`block`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Block, id_mysql, A >::tx_count_type_
  query_columns< ::eosio::Block, id_mysql, A >::
  tx_count (A::table_name, "`tx_count`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Block, id_mysql, A >::action_count_type_
  query_columns< ::eosio::Block, id_mysql, A >::
  action_count (A::table_name, "`action_count`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Block, id_mysql, A >::context_free_action_count_type_
  query_columns< ::eosio::Block, id_mysql, A >::
  context_free_action_count (A::table_name, "`context_free_action_count`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Block, id_mysql, A >::created_at_type_
  query_columns< ::eosio::Block, id_mysql, A >::
  created_at (A::table_name, "`created_at`", 0);

  template <typename A>
  struct pointer_query_columns< ::eosio::Block, id_mysql, A >:
    query_columns< ::eosio::Block, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::eosio::Block, id_mysql >:
    public access::object_traits< ::eosio::Block >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      unsigned long id_size;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      details::buffer id_value;
      unsigned long id_size;
      my_bool id_null;

      // num_
      //
      unsigned int num_value;
      my_bool num_null;

      // timestamp_
      //
      MYSQL_TIME timestamp_value;
      my_bool timestamp_null;

      // block_
      //
      details::buffer block_value;
      unsigned long block_size;
      my_bool block_null;

      // tx_count_
      //
      unsigned int tx_count_value;
      my_bool tx_count_null;

      // action_count_
      //
      unsigned int action_count_value;
      my_bool action_count_null;

      // context_free_action_count_
      //
      unsigned int context_free_action_count_value;
      my_bool context_free_action_count_null;

      // created_at_
      //
      MYSQL_TIME created_at_value;
      my_bool created_at_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static odb::details::shared_ptr<prepared_query_impl>
    prepare_query (connection&, const char*, const query_base_type&);

    static odb::details::shared_ptr<result_impl>
    execute_query (prepared_query_impl&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::eosio::Block, id_common >:
    public access::object_traits_impl< ::eosio::Block, id_mysql >
  {
  };

  // Transaction
  //
  template <typename A>
  struct query_columns< ::eosio::Transaction, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::bytes,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    id_type_;

    static const id_type_ id;

    // block_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::bytes,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    block_id_type_;

    static const block_id_type_ block_id;

    // block_num
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint32_t,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    block_num_type_;

    static const block_num_type_ block_num;

    // block_time
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::datetime,
        mysql::id_datetime >::query_type,
      mysql::id_datetime >
    block_time_type_;

    static const block_time_type_ block_time;

    // block_seq
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint16_t,
        mysql::id_ushort >::query_type,
      mysql::id_ushort >
    block_seq_type_;

    static const block_seq_type_ block_seq;

    // action_count
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint32_t,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    action_count_type_;

    static const action_count_type_ action_count;

    // context_free_action_count
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint32_t,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    context_free_action_count_type_;

    static const context_free_action_count_type_ context_free_action_count;
  };

  template <typename A>
  const typename query_columns< ::eosio::Transaction, id_mysql, A >::id_type_
  query_columns< ::eosio::Transaction, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Transaction, id_mysql, A >::block_id_type_
  query_columns< ::eosio::Transaction, id_mysql, A >::
  block_id (A::table_name, "`block_id`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Transaction, id_mysql, A >::block_num_type_
  query_columns< ::eosio::Transaction, id_mysql, A >::
  block_num (A::table_name, "`block_num`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Transaction, id_mysql, A >::block_time_type_
  query_columns< ::eosio::Transaction, id_mysql, A >::
  block_time (A::table_name, "`block_time`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Transaction, id_mysql, A >::block_seq_type_
  query_columns< ::eosio::Transaction, id_mysql, A >::
  block_seq (A::table_name, "`block_seq`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Transaction, id_mysql, A >::action_count_type_
  query_columns< ::eosio::Transaction, id_mysql, A >::
  action_count (A::table_name, "`action_count`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Transaction, id_mysql, A >::context_free_action_count_type_
  query_columns< ::eosio::Transaction, id_mysql, A >::
  context_free_action_count (A::table_name, "`context_free_action_count`", 0);

  template <typename A>
  struct pointer_query_columns< ::eosio::Transaction, id_mysql, A >:
    query_columns< ::eosio::Transaction, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::eosio::Transaction, id_mysql >:
    public access::object_traits< ::eosio::Transaction >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      unsigned long id_size;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      details::buffer id_value;
      unsigned long id_size;
      my_bool id_null;

      // block_id_
      //
      details::buffer block_id_value;
      unsigned long block_id_size;
      my_bool block_id_null;

      // block_num_
      //
      unsigned int block_num_value;
      my_bool block_num_null;

      // block_time_
      //
      MYSQL_TIME block_time_value;
      my_bool block_time_null;

      // block_seq_
      //
      unsigned short block_seq_value;
      my_bool block_seq_null;

      // action_count_
      //
      unsigned int action_count_value;
      my_bool action_count_null;

      // context_free_action_count_
      //
      unsigned int context_free_action_count_value;
      my_bool context_free_action_count_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static odb::details::shared_ptr<prepared_query_impl>
    prepare_query (connection&, const char*, const query_base_type&);

    static odb::details::shared_ptr<result_impl>
    execute_query (prepared_query_impl&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::eosio::Transaction, id_common >:
    public access::object_traits_impl< ::eosio::Transaction, id_mysql >
  {
  };

  // TransactionTrace
  //
  template <typename A>
  struct query_columns< ::eosio::TransactionTrace, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::bytes,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    id_type_;

    static const id_type_ id;

    // scheduled
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    scheduled_type_;

    static const scheduled_type_ scheduled;

    // status
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::TransactionStatus,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    status_type_;

    static const status_type_ status;

    // net_usage_words
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    net_usage_words_type_;

    static const net_usage_words_type_ net_usage_words;

    // cpu_usage_us
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint32_t,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    cpu_usage_us_type_;

    static const cpu_usage_us_type_ cpu_usage_us;

    // exception
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::basic_string< char >,
        mysql::id_string >::query_type,
      mysql::id_string >
    exception_type_;

    static const exception_type_ exception;
  };

  template <typename A>
  const typename query_columns< ::eosio::TransactionTrace, id_mysql, A >::id_type_
  query_columns< ::eosio::TransactionTrace, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::eosio::TransactionTrace, id_mysql, A >::scheduled_type_
  query_columns< ::eosio::TransactionTrace, id_mysql, A >::
  scheduled (A::table_name, "`scheduled`", 0);

  template <typename A>
  const typename query_columns< ::eosio::TransactionTrace, id_mysql, A >::status_type_
  query_columns< ::eosio::TransactionTrace, id_mysql, A >::
  status (A::table_name, "`status`", 0);

  template <typename A>
  const typename query_columns< ::eosio::TransactionTrace, id_mysql, A >::net_usage_words_type_
  query_columns< ::eosio::TransactionTrace, id_mysql, A >::
  net_usage_words (A::table_name, "`net_usage_words`", 0);

  template <typename A>
  const typename query_columns< ::eosio::TransactionTrace, id_mysql, A >::cpu_usage_us_type_
  query_columns< ::eosio::TransactionTrace, id_mysql, A >::
  cpu_usage_us (A::table_name, "`cpu_usage_us`", 0);

  template <typename A>
  const typename query_columns< ::eosio::TransactionTrace, id_mysql, A >::exception_type_
  query_columns< ::eosio::TransactionTrace, id_mysql, A >::
  exception (A::table_name, "`exception`", 0);

  template <typename A>
  struct pointer_query_columns< ::eosio::TransactionTrace, id_mysql, A >:
    query_columns< ::eosio::TransactionTrace, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >:
    public access::object_traits< ::eosio::TransactionTrace >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      unsigned long id_size;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      details::buffer id_value;
      unsigned long id_size;
      my_bool id_null;

      // scheduled_
      //
      signed char scheduled_value;
      my_bool scheduled_null;

      // status_
      //
      mysql::value_traits< ::eosio::TransactionStatus, mysql::id_enum >::image_type status_value;
      unsigned long status_size;
      my_bool status_null;

      // net_usage_words_
      //
      unsigned int net_usage_words_value;
      my_bool net_usage_words_null;

      // cpu_usage_us_
      //
      unsigned int cpu_usage_us_value;
      my_bool cpu_usage_us_null;

      // exception_
      //
      details::buffer exception_value;
      unsigned long exception_size;
      my_bool exception_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static odb::details::shared_ptr<prepared_query_impl>
    prepare_query (connection&, const char*, const query_base_type&);

    static odb::details::shared_ptr<result_impl>
    execute_query (prepared_query_impl&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::eosio::TransactionTrace, id_common >:
    public access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >
  {
  };

  // Action
  //
  template <typename A>
  struct query_columns< ::eosio::Action, id_mysql, A >
  {
    // global_seq
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    global_seq_type_;

    static const global_seq_type_ global_seq;

    // account_seq
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    account_seq_type_;

    static const account_seq_type_ account_seq;

    // parent_seq
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    parent_seq_type_;

    static const parent_seq_type_ parent_seq;

    // account
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::name_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    account_type_;

    static const account_type_ account;

    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::name_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    name_type_;

    static const name_type_ name;

    // auth
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::vector< char >,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    auth_type_;

    static const auth_type_ auth;

    // data
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::bytes,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    data_type_;

    static const data_type_ data;

    // receiver
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::name_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    receiver_type_;

    static const receiver_type_ receiver;

    // auth_seq
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::vector< char >,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    auth_seq_type_;

    static const auth_seq_type_ auth_seq;

    // code_seq
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    code_seq_type_;

    static const code_seq_type_ code_seq;

    // abi_seq
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        unsigned int,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    abi_seq_type_;

    static const abi_seq_type_ abi_seq;

    // tx_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::bytes,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    tx_id_type_;

    static const tx_id_type_ tx_id;

    // console
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::basic_string< char >,
        mysql::id_string >::query_type,
      mysql::id_string >
    console_type_;

    static const console_type_ console;
  };

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::global_seq_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  global_seq (A::table_name, "`global_seq`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::account_seq_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  account_seq (A::table_name, "`account_seq`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::parent_seq_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  parent_seq (A::table_name, "`parent_seq`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::account_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  account (A::table_name, "`account`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::name_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::auth_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  auth (A::table_name, "`auth`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::data_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  data (A::table_name, "`data`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::receiver_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  receiver (A::table_name, "`receiver`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::auth_seq_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  auth_seq (A::table_name, "`auth_seq`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::code_seq_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  code_seq (A::table_name, "`code_seq`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::abi_seq_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  abi_seq (A::table_name, "`abi_seq`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::tx_id_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  tx_id (A::table_name, "`tx_id`", 0);

  template <typename A>
  const typename query_columns< ::eosio::Action, id_mysql, A >::console_type_
  query_columns< ::eosio::Action, id_mysql, A >::
  console (A::table_name, "`console`", 0);

  template <typename A>
  struct pointer_query_columns< ::eosio::Action, id_mysql, A >:
    query_columns< ::eosio::Action, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::eosio::Action, id_mysql >:
    public access::object_traits< ::eosio::Action >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // global_seq_
      //
      unsigned long long global_seq_value;
      my_bool global_seq_null;

      // account_seq_
      //
      unsigned long long account_seq_value;
      my_bool account_seq_null;

      // parent_seq_
      //
      unsigned long long parent_seq_value;
      my_bool parent_seq_null;

      // account_
      //
      unsigned long long account_value;
      my_bool account_null;

      // name_
      //
      unsigned long long name_value;
      my_bool name_null;

      // auth_
      //
      details::buffer auth_value;
      unsigned long auth_size;
      my_bool auth_null;

      // data_
      //
      details::buffer data_value;
      unsigned long data_size;
      my_bool data_null;

      // receiver_
      //
      unsigned long long receiver_value;
      my_bool receiver_null;

      // auth_seq_
      //
      details::buffer auth_seq_value;
      unsigned long auth_seq_size;
      my_bool auth_seq_null;

      // code_seq_
      //
      unsigned int code_seq_value;
      my_bool code_seq_null;

      // abi_seq_
      //
      unsigned int abi_seq_value;
      my_bool abi_seq_null;

      // tx_id_
      //
      details::buffer tx_id_value;
      unsigned long tx_id_size;
      my_bool tx_id_null;

      // console_
      //
      details::buffer console_value;
      unsigned long console_size;
      my_bool console_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 13UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static odb::details::shared_ptr<prepared_query_impl>
    prepare_query (connection&, const char*, const query_base_type&);

    static odb::details::shared_ptr<result_impl>
    execute_query (prepared_query_impl&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::eosio::Action, id_common >:
    public access::object_traits_impl< ::eosio::Action, id_mysql >
  {
  };

  // TokenTransfer
  //
  template <typename A>
  struct query_columns< ::eosio::TokenTransfer, id_mysql, A >
  {
    // action_global_seq
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    action_global_seq_type_;

    static const action_global_seq_type_ action_global_seq;

    // symbol
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    symbol_type_;

    static const symbol_type_ symbol;

    // precision
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint8_t,
        mysql::id_utiny >::query_type,
      mysql::id_utiny >
    precision_type_;

    static const precision_type_ precision;

    // amount
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::int64_t,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    amount_type_;

    static const amount_type_ amount;

    // from
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::name_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    from_type_;

    static const from_type_ from;

    // to
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::name_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    to_type_;

    static const to_type_ to;

    // memo
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::basic_string< char >,
        mysql::id_string >::query_type,
      mysql::id_string >
    memo_type_;

    static const memo_type_ memo;

    // tx_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::eosio::bytes,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    tx_id_type_;

    static const tx_id_type_ tx_id;
  };

  template <typename A>
  const typename query_columns< ::eosio::TokenTransfer, id_mysql, A >::action_global_seq_type_
  query_columns< ::eosio::TokenTransfer, id_mysql, A >::
  action_global_seq (A::table_name, "`action_global_seq`", 0);

  template <typename A>
  const typename query_columns< ::eosio::TokenTransfer, id_mysql, A >::symbol_type_
  query_columns< ::eosio::TokenTransfer, id_mysql, A >::
  symbol (A::table_name, "`symbol`", 0);

  template <typename A>
  const typename query_columns< ::eosio::TokenTransfer, id_mysql, A >::precision_type_
  query_columns< ::eosio::TokenTransfer, id_mysql, A >::
  precision (A::table_name, "`precision`", 0);

  template <typename A>
  const typename query_columns< ::eosio::TokenTransfer, id_mysql, A >::amount_type_
  query_columns< ::eosio::TokenTransfer, id_mysql, A >::
  amount (A::table_name, "`amount`", 0);

  template <typename A>
  const typename query_columns< ::eosio::TokenTransfer, id_mysql, A >::from_type_
  query_columns< ::eosio::TokenTransfer, id_mysql, A >::
  from (A::table_name, "`from`", 0);

  template <typename A>
  const typename query_columns< ::eosio::TokenTransfer, id_mysql, A >::to_type_
  query_columns< ::eosio::TokenTransfer, id_mysql, A >::
  to (A::table_name, "`to`", 0);

  template <typename A>
  const typename query_columns< ::eosio::TokenTransfer, id_mysql, A >::memo_type_
  query_columns< ::eosio::TokenTransfer, id_mysql, A >::
  memo (A::table_name, "`memo`", 0);

  template <typename A>
  const typename query_columns< ::eosio::TokenTransfer, id_mysql, A >::tx_id_type_
  query_columns< ::eosio::TokenTransfer, id_mysql, A >::
  tx_id (A::table_name, "`tx_id`", 0);

  template <typename A>
  struct pointer_query_columns< ::eosio::TokenTransfer, id_mysql, A >:
    query_columns< ::eosio::TokenTransfer, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >:
    public access::object_traits< ::eosio::TokenTransfer >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // action_global_seq_
      //
      unsigned long long action_global_seq_value;
      my_bool action_global_seq_null;

      // symbol_
      //
      details::buffer symbol_value;
      unsigned long symbol_size;
      my_bool symbol_null;

      // precision_
      //
      unsigned char precision_value;
      my_bool precision_null;

      // amount_
      //
      long long amount_value;
      my_bool amount_null;

      // from_
      //
      unsigned long long from_value;
      my_bool from_null;

      // to_
      //
      unsigned long long to_value;
      my_bool to_null;

      // memo_
      //
      details::buffer memo_value;
      unsigned long memo_size;
      my_bool memo_null;

      // tx_id_
      //
      details::buffer tx_id_value;
      unsigned long tx_id_size;
      my_bool tx_id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static odb::details::shared_ptr<prepared_query_impl>
    prepare_query (connection&, const char*, const query_base_type&);

    static odb::details::shared_ptr<result_impl>
    execute_query (prepared_query_impl&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::eosio::TokenTransfer, id_common >:
    public access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >
  {
  };

  // Stats
  //
  // Block
  //
  // Transaction
  //
  // TransactionTrace
  //
  // Action
  //
  // TokenTransfer
  //
}

#include "eos-odb.ixx"

#include <odb/post.hxx>

#endif // EOS_ODB_HXX
