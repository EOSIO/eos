// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "eos-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/simple-object-statements.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/prepared-query.hxx>
#include <odb/mysql/simple-object-result.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // Stats
  //

  struct access::object_traits_impl< ::eosio::Stats, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::eosio::Stats, id_mysql >::id_type
  access::object_traits_impl< ::eosio::Stats, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::eosio::Stats, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // tx_count_
    //
    t[1UL] = 0;

    // action_count_
    //
    t[2UL] = 0;

    // context_free_action_count_
    //
    t[3UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::eosio::Stats, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // tx_count_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.tx_count_value;
    b[n].is_null = &i.tx_count_null;
    n++;

    // action_count_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.action_count_value;
    b[n].is_null = &i.action_count_null;
    n++;

    // context_free_action_count_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.context_free_action_count_value;
    b[n].is_null = &i.context_free_action_count_null;
    n++;
  }

  void access::object_traits_impl< ::eosio::Stats, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::eosio::Stats, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      unsigned int const& v =
        o.id_;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.id_value, is_null, v);
      i.id_null = is_null;
    }

    // tx_count_
    //
    {
      ::uint64_t const& v =
        o.tx_count_;

      bool is_null (false);
      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_image (
        i.tx_count_value, is_null, v);
      i.tx_count_null = is_null;
    }

    // action_count_
    //
    {
      ::uint64_t const& v =
        o.action_count_;

      bool is_null (false);
      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_image (
        i.action_count_value, is_null, v);
      i.action_count_null = is_null;
    }

    // context_free_action_count_
    //
    {
      ::uint64_t const& v =
        o.context_free_action_count_;

      bool is_null (false);
      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_image (
        i.context_free_action_count_value, is_null, v);
      i.context_free_action_count_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::eosio::Stats, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      unsigned int& v =
        o.id_;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // tx_count_
    //
    {
      ::uint64_t& v =
        o.tx_count_;

      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.tx_count_value,
        i.tx_count_null);
    }

    // action_count_
    //
    {
      ::uint64_t& v =
        o.action_count_;

      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.action_count_value,
        i.action_count_null);
    }

    // context_free_action_count_
    //
    {
      ::uint64_t& v =
        o.context_free_action_count_;

      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.context_free_action_count_value,
        i.context_free_action_count_null);
    }
  }

  void access::object_traits_impl< ::eosio::Stats, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::eosio::Stats, id_mysql >::persist_statement[] =
  "INSERT INTO `Stats` "
  "(`id`, "
  "`tx_count`, "
  "`action_count`, "
  "`context_free_action_count`) "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::eosio::Stats, id_mysql >::find_statement[] =
  "SELECT "
  "`Stats`.`id`, "
  "`Stats`.`tx_count`, "
  "`Stats`.`action_count`, "
  "`Stats`.`context_free_action_count` "
  "FROM `Stats` "
  "WHERE `Stats`.`id`=?";

  const char access::object_traits_impl< ::eosio::Stats, id_mysql >::update_statement[] =
  "UPDATE `Stats` "
  "SET "
  "`tx_count`=?, "
  "`action_count`=?, "
  "`context_free_action_count`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::eosio::Stats, id_mysql >::erase_statement[] =
  "DELETE FROM `Stats` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::eosio::Stats, id_mysql >::query_statement[] =
  "SELECT "
  "`Stats`.`id`, "
  "`Stats`.`tx_count`, "
  "`Stats`.`action_count`, "
  "`Stats`.`context_free_action_count` "
  "FROM `Stats`";

  const char access::object_traits_impl< ::eosio::Stats, id_mysql >::erase_query_statement[] =
  "DELETE FROM `Stats`";

  const char access::object_traits_impl< ::eosio::Stats, id_mysql >::table_name[] =
  "`Stats`";

  void access::object_traits_impl< ::eosio::Stats, id_mysql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::eosio::Stats, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::eosio::Stats, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::eosio::Stats, id_mysql >::pointer_type
  access::object_traits_impl< ::eosio::Stats, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::eosio::Stats, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::eosio::Stats, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::eosio::Stats, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::eosio::Stats, id_mysql >::object_type >
  access::object_traits_impl< ::eosio::Stats, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::eosio::Stats, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::eosio::Stats, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::eosio::Stats, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // Block
  //

  struct access::object_traits_impl< ::eosio::Block, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::eosio::Block, id_mysql >::id_type
  access::object_traits_impl< ::eosio::Block, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_value (
        id,
        i.id_value,
        i.id_size,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::eosio::Block, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    if (t[0UL])
    {
      i.id_value.capacity (i.id_size);
      grew = true;
    }

    // num_
    //
    t[1UL] = 0;

    // timestamp_
    //
    t[2UL] = 0;

    // block_
    //
    if (t[3UL])
    {
      i.block_value.capacity (i.block_size);
      grew = true;
    }

    // tx_count_
    //
    t[4UL] = 0;

    // action_count_
    //
    t[5UL] = 0;

    // context_free_action_count_
    //
    t[6UL] = 0;

    // created_at_
    //
    t[7UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::eosio::Block, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_BLOB;
      b[n].buffer = i.id_value.data ();
      b[n].buffer_length = static_cast<unsigned long> (
        i.id_value.capacity ());
      b[n].length = &i.id_size;
      b[n].is_null = &i.id_null;
      n++;
    }

    // num_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.num_value;
    b[n].is_null = &i.num_null;
    n++;

    // timestamp_
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.timestamp_value;
    b[n].is_null = &i.timestamp_null;
    n++;

    // block_
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.block_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.block_value.capacity ());
    b[n].length = &i.block_size;
    b[n].is_null = &i.block_null;
    n++;

    // tx_count_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.tx_count_value;
    b[n].is_null = &i.tx_count_null;
    n++;

    // action_count_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.action_count_value;
    b[n].is_null = &i.action_count_null;
    n++;

    // context_free_action_count_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.context_free_action_count_value;
    b[n].is_null = &i.context_free_action_count_null;
    n++;

    // created_at_
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.created_at_value;
    b[n].is_null = &i.created_at_null;
    n++;
  }

  void access::object_traits_impl< ::eosio::Block, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.id_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.id_value.capacity ());
    b[n].length = &i.id_size;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::eosio::Block, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      ::eosio::bytes const& v =
        o.id_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.id_value.capacity ());
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_image (
        i.id_value,
        size,
        is_null,
        v);
      i.id_null = is_null;
      i.id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.id_value.capacity ());
    }

    // num_
    //
    {
      unsigned int const& v =
        o.num_;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.num_value, is_null, v);
      i.num_null = is_null;
    }

    // timestamp_
    //
    {
      ::eosio::datetime const& v =
        o.timestamp_;

      bool is_null (true);
      mysql::value_traits<
          ::eosio::datetime,
          mysql::id_datetime >::set_image (
        i.timestamp_value, is_null, v);
      i.timestamp_null = is_null;
    }

    // block_
    //
    {
      ::eosio::bytes const& v =
        o.block_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.block_value.capacity ());
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_image (
        i.block_value,
        size,
        is_null,
        v);
      i.block_null = is_null;
      i.block_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.block_value.capacity ());
    }

    // tx_count_
    //
    {
      ::uint32_t const& v =
        o.tx_count_;

      bool is_null (false);
      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_image (
        i.tx_count_value, is_null, v);
      i.tx_count_null = is_null;
    }

    // action_count_
    //
    {
      ::uint32_t const& v =
        o.action_count_;

      bool is_null (false);
      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_image (
        i.action_count_value, is_null, v);
      i.action_count_null = is_null;
    }

    // context_free_action_count_
    //
    {
      ::uint32_t const& v =
        o.context_free_action_count_;

      bool is_null (false);
      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_image (
        i.context_free_action_count_value, is_null, v);
      i.context_free_action_count_null = is_null;
    }

    // created_at_
    //
    {
      ::eosio::datetime const& v =
        o.created_at_;

      bool is_null (true);
      mysql::value_traits<
          ::eosio::datetime,
          mysql::id_datetime >::set_image (
        i.created_at_value, is_null, v);
      i.created_at_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::eosio::Block, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::eosio::bytes& v =
        o.id_;

      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_value (
        v,
        i.id_value,
        i.id_size,
        i.id_null);
    }

    // num_
    //
    {
      unsigned int& v =
        o.num_;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.num_value,
        i.num_null);
    }

    // timestamp_
    //
    {
      ::eosio::datetime& v =
        o.timestamp_;

      mysql::value_traits<
          ::eosio::datetime,
          mysql::id_datetime >::set_value (
        v,
        i.timestamp_value,
        i.timestamp_null);
    }

    // block_
    //
    {
      ::eosio::bytes& v =
        o.block_;

      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_value (
        v,
        i.block_value,
        i.block_size,
        i.block_null);
    }

    // tx_count_
    //
    {
      ::uint32_t& v =
        o.tx_count_;

      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_value (
        v,
        i.tx_count_value,
        i.tx_count_null);
    }

    // action_count_
    //
    {
      ::uint32_t& v =
        o.action_count_;

      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_value (
        v,
        i.action_count_value,
        i.action_count_null);
    }

    // context_free_action_count_
    //
    {
      ::uint32_t& v =
        o.context_free_action_count_;

      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_value (
        v,
        i.context_free_action_count_value,
        i.context_free_action_count_null);
    }

    // created_at_
    //
    {
      ::eosio::datetime& v =
        o.created_at_;

      mysql::value_traits<
          ::eosio::datetime,
          mysql::id_datetime >::set_value (
        v,
        i.created_at_value,
        i.created_at_null);
    }
  }

  void access::object_traits_impl< ::eosio::Block, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    {
      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.id_value.capacity ());
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_image (
        i.id_value,
        size,
        is_null,
        id);
      i.id_null = is_null;
      i.id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.id_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  const char access::object_traits_impl< ::eosio::Block, id_mysql >::persist_statement[] =
  "INSERT INTO `Block` "
  "(`id`, "
  "`num`, "
  "`timestamp`, "
  "`block`, "
  "`tx_count`, "
  "`action_count`, "
  "`context_free_action_count`, "
  "`created_at`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::eosio::Block, id_mysql >::find_statement[] =
  "SELECT "
  "`Block`.`id`, "
  "`Block`.`num`, "
  "`Block`.`timestamp`, "
  "`Block`.`block`, "
  "`Block`.`tx_count`, "
  "`Block`.`action_count`, "
  "`Block`.`context_free_action_count`, "
  "`Block`.`created_at` "
  "FROM `Block` "
  "WHERE `Block`.`id`=?";

  const char access::object_traits_impl< ::eosio::Block, id_mysql >::update_statement[] =
  "UPDATE `Block` "
  "SET "
  "`num`=?, "
  "`timestamp`=?, "
  "`block`=?, "
  "`tx_count`=?, "
  "`action_count`=?, "
  "`context_free_action_count`=?, "
  "`created_at`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::eosio::Block, id_mysql >::erase_statement[] =
  "DELETE FROM `Block` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::eosio::Block, id_mysql >::query_statement[] =
  "SELECT "
  "`Block`.`id`, "
  "`Block`.`num`, "
  "`Block`.`timestamp`, "
  "`Block`.`block`, "
  "`Block`.`tx_count`, "
  "`Block`.`action_count`, "
  "`Block`.`context_free_action_count`, "
  "`Block`.`created_at` "
  "FROM `Block`";

  const char access::object_traits_impl< ::eosio::Block, id_mysql >::erase_query_statement[] =
  "DELETE FROM `Block`";

  const char access::object_traits_impl< ::eosio::Block, id_mysql >::table_name[] =
  "`Block`";

  void access::object_traits_impl< ::eosio::Block, id_mysql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::eosio::Block, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::eosio::Block, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::eosio::Block, id_mysql >::pointer_type
  access::object_traits_impl< ::eosio::Block, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::eosio::Block, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::eosio::Block, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::eosio::Block, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::eosio::Block, id_mysql >::object_type >
  access::object_traits_impl< ::eosio::Block, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::eosio::Block, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::eosio::Block, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::eosio::Block, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // Transaction
  //

  struct access::object_traits_impl< ::eosio::Transaction, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::eosio::Transaction, id_mysql >::id_type
  access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_value (
        id,
        i.id_value,
        i.id_size,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    if (t[0UL])
    {
      i.id_value.capacity (i.id_size);
      grew = true;
    }

    // block_id_
    //
    if (t[1UL])
    {
      i.block_id_value.capacity (i.block_id_size);
      grew = true;
    }

    // block_num_
    //
    t[2UL] = 0;

    // block_time_
    //
    t[3UL] = 0;

    // block_seq_
    //
    t[4UL] = 0;

    // action_count_
    //
    t[5UL] = 0;

    // context_free_action_count_
    //
    t[6UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_BLOB;
      b[n].buffer = i.id_value.data ();
      b[n].buffer_length = static_cast<unsigned long> (
        i.id_value.capacity ());
      b[n].length = &i.id_size;
      b[n].is_null = &i.id_null;
      n++;
    }

    // block_id_
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.block_id_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.block_id_value.capacity ());
    b[n].length = &i.block_id_size;
    b[n].is_null = &i.block_id_null;
    n++;

    // block_num_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.block_num_value;
    b[n].is_null = &i.block_num_null;
    n++;

    // block_time_
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.block_time_value;
    b[n].is_null = &i.block_time_null;
    n++;

    // block_seq_
    //
    b[n].buffer_type = MYSQL_TYPE_SHORT;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.block_seq_value;
    b[n].is_null = &i.block_seq_null;
    n++;

    // action_count_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.action_count_value;
    b[n].is_null = &i.action_count_null;
    n++;

    // context_free_action_count_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.context_free_action_count_value;
    b[n].is_null = &i.context_free_action_count_null;
    n++;
  }

  void access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.id_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.id_value.capacity ());
    b[n].length = &i.id_size;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      ::eosio::bytes const& v =
        o.id_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.id_value.capacity ());
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_image (
        i.id_value,
        size,
        is_null,
        v);
      i.id_null = is_null;
      i.id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.id_value.capacity ());
    }

    // block_id_
    //
    {
      ::eosio::bytes const& v =
        o.block_id_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.block_id_value.capacity ());
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_image (
        i.block_id_value,
        size,
        is_null,
        v);
      i.block_id_null = is_null;
      i.block_id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.block_id_value.capacity ());
    }

    // block_num_
    //
    {
      ::uint32_t const& v =
        o.block_num_;

      bool is_null (false);
      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_image (
        i.block_num_value, is_null, v);
      i.block_num_null = is_null;
    }

    // block_time_
    //
    {
      ::eosio::datetime const& v =
        o.block_time_;

      bool is_null (true);
      mysql::value_traits<
          ::eosio::datetime,
          mysql::id_datetime >::set_image (
        i.block_time_value, is_null, v);
      i.block_time_null = is_null;
    }

    // block_seq_
    //
    {
      ::uint16_t const& v =
        o.block_seq_;

      bool is_null (false);
      mysql::value_traits<
          ::uint16_t,
          mysql::id_ushort >::set_image (
        i.block_seq_value, is_null, v);
      i.block_seq_null = is_null;
    }

    // action_count_
    //
    {
      ::uint32_t const& v =
        o.action_count_;

      bool is_null (false);
      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_image (
        i.action_count_value, is_null, v);
      i.action_count_null = is_null;
    }

    // context_free_action_count_
    //
    {
      ::uint32_t const& v =
        o.context_free_action_count_;

      bool is_null (false);
      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_image (
        i.context_free_action_count_value, is_null, v);
      i.context_free_action_count_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::eosio::bytes& v =
        o.id_;

      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_value (
        v,
        i.id_value,
        i.id_size,
        i.id_null);
    }

    // block_id_
    //
    {
      ::eosio::bytes& v =
        o.block_id_;

      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_value (
        v,
        i.block_id_value,
        i.block_id_size,
        i.block_id_null);
    }

    // block_num_
    //
    {
      ::uint32_t& v =
        o.block_num_;

      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_value (
        v,
        i.block_num_value,
        i.block_num_null);
    }

    // block_time_
    //
    {
      ::eosio::datetime& v =
        o.block_time_;

      mysql::value_traits<
          ::eosio::datetime,
          mysql::id_datetime >::set_value (
        v,
        i.block_time_value,
        i.block_time_null);
    }

    // block_seq_
    //
    {
      ::uint16_t& v =
        o.block_seq_;

      mysql::value_traits<
          ::uint16_t,
          mysql::id_ushort >::set_value (
        v,
        i.block_seq_value,
        i.block_seq_null);
    }

    // action_count_
    //
    {
      ::uint32_t& v =
        o.action_count_;

      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_value (
        v,
        i.action_count_value,
        i.action_count_null);
    }

    // context_free_action_count_
    //
    {
      ::uint32_t& v =
        o.context_free_action_count_;

      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_value (
        v,
        i.context_free_action_count_value,
        i.context_free_action_count_null);
    }
  }

  void access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    {
      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.id_value.capacity ());
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_image (
        i.id_value,
        size,
        is_null,
        id);
      i.id_null = is_null;
      i.id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.id_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  const char access::object_traits_impl< ::eosio::Transaction, id_mysql >::persist_statement[] =
  "INSERT INTO `Transaction` "
  "(`id`, "
  "`block_id`, "
  "`block_num`, "
  "`block_time`, "
  "`block_seq`, "
  "`action_count`, "
  "`context_free_action_count`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::eosio::Transaction, id_mysql >::find_statement[] =
  "SELECT "
  "`Transaction`.`id`, "
  "`Transaction`.`block_id`, "
  "`Transaction`.`block_num`, "
  "`Transaction`.`block_time`, "
  "`Transaction`.`block_seq`, "
  "`Transaction`.`action_count`, "
  "`Transaction`.`context_free_action_count` "
  "FROM `Transaction` "
  "WHERE `Transaction`.`id`=?";

  const char access::object_traits_impl< ::eosio::Transaction, id_mysql >::update_statement[] =
  "UPDATE `Transaction` "
  "SET "
  "`block_id`=?, "
  "`block_num`=?, "
  "`block_time`=?, "
  "`block_seq`=?, "
  "`action_count`=?, "
  "`context_free_action_count`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::eosio::Transaction, id_mysql >::erase_statement[] =
  "DELETE FROM `Transaction` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::eosio::Transaction, id_mysql >::query_statement[] =
  "SELECT "
  "`Transaction`.`id`, "
  "`Transaction`.`block_id`, "
  "`Transaction`.`block_num`, "
  "`Transaction`.`block_time`, "
  "`Transaction`.`block_seq`, "
  "`Transaction`.`action_count`, "
  "`Transaction`.`context_free_action_count` "
  "FROM `Transaction`";

  const char access::object_traits_impl< ::eosio::Transaction, id_mysql >::erase_query_statement[] =
  "DELETE FROM `Transaction`";

  const char access::object_traits_impl< ::eosio::Transaction, id_mysql >::table_name[] =
  "`Transaction`";

  void access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::eosio::Transaction, id_mysql >::pointer_type
  access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::eosio::Transaction, id_mysql >::object_type >
  access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::eosio::Transaction, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // TransactionTrace
  //

  struct access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::id_type
  access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_value (
        id,
        i.id_value,
        i.id_size,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    if (t[0UL])
    {
      i.id_value.capacity (i.id_size);
      grew = true;
    }

    // scheduled_
    //
    t[1UL] = 0;

    // status_
    //
    if (t[2UL])
    {
      if (mysql::enum_traits::grow (i.status_value, i.status_size))
        grew = true;
      else
        t[2UL] = 0;
    }

    // net_usage_words_
    //
    t[3UL] = 0;

    // cpu_usage_us_
    //
    t[4UL] = 0;

    // exception_
    //
    if (t[5UL])
    {
      i.exception_value.capacity (i.exception_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_BLOB;
      b[n].buffer = i.id_value.data ();
      b[n].buffer_length = static_cast<unsigned long> (
        i.id_value.capacity ());
      b[n].length = &i.id_size;
      b[n].is_null = &i.id_null;
      n++;
    }

    // scheduled_
    //
    b[n].buffer_type = MYSQL_TYPE_TINY;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.scheduled_value;
    b[n].is_null = &i.scheduled_null;
    n++;

    // status_
    //
    mysql::enum_traits::bind (b[n],
                              i.status_value,
                              i.status_size,
                              &i.status_null);
    n++;

    // net_usage_words_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.net_usage_words_value;
    b[n].is_null = &i.net_usage_words_null;
    n++;

    // cpu_usage_us_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.cpu_usage_us_value;
    b[n].is_null = &i.cpu_usage_us_null;
    n++;

    // exception_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.exception_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.exception_value.capacity ());
    b[n].length = &i.exception_size;
    b[n].is_null = &i.exception_null;
    n++;
  }

  void access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.id_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.id_value.capacity ());
    b[n].length = &i.id_size;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      ::eosio::bytes const& v =
        o.id_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.id_value.capacity ());
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_image (
        i.id_value,
        size,
        is_null,
        v);
      i.id_null = is_null;
      i.id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.id_value.capacity ());
    }

    // scheduled_
    //
    {
      bool const& v =
        o.scheduled_;

      bool is_null (false);
      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_image (
        i.scheduled_value, is_null, v);
      i.scheduled_null = is_null;
    }

    // status_
    //
    {
      ::eosio::TransactionStatus const& v =
        o.status_;

      bool is_null (false);
      if (mysql::enum_traits::set_image (
            i.status_value,
            i.status_size,
            is_null,
            v))
        grew = true;

      i.status_null = is_null;
    }

    // net_usage_words_
    //
    {
      unsigned int const& v =
        o.net_usage_words_;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.net_usage_words_value, is_null, v);
      i.net_usage_words_null = is_null;
    }

    // cpu_usage_us_
    //
    {
      ::uint32_t const& v =
        o.cpu_usage_us_;

      bool is_null (false);
      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_image (
        i.cpu_usage_us_value, is_null, v);
      i.cpu_usage_us_null = is_null;
    }

    // exception_
    //
    {
      ::odb::nullable< ::std::basic_string< char > > const& v =
        o.exception_;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.exception_value.capacity ());
      mysql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          mysql::id_string >::set_image (
        i.exception_value,
        size,
        is_null,
        v);
      i.exception_null = is_null;
      i.exception_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.exception_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::eosio::bytes& v =
        o.id_;

      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_value (
        v,
        i.id_value,
        i.id_size,
        i.id_null);
    }

    // scheduled_
    //
    {
      bool& v =
        o.scheduled_;

      mysql::value_traits<
          bool,
          mysql::id_tiny >::set_value (
        v,
        i.scheduled_value,
        i.scheduled_null);
    }

    // status_
    //
    {
      ::eosio::TransactionStatus& v =
        o.status_;

      mysql::enum_traits::set_value (
        v,
        i.status_value,
        i.status_size,
        i.status_null);
    }

    // net_usage_words_
    //
    {
      unsigned int& v =
        o.net_usage_words_;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.net_usage_words_value,
        i.net_usage_words_null);
    }

    // cpu_usage_us_
    //
    {
      ::uint32_t& v =
        o.cpu_usage_us_;

      mysql::value_traits<
          ::uint32_t,
          mysql::id_ulong >::set_value (
        v,
        i.cpu_usage_us_value,
        i.cpu_usage_us_null);
    }

    // exception_
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.exception_;

      mysql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          mysql::id_string >::set_value (
        v,
        i.exception_value,
        i.exception_size,
        i.exception_null);
    }
  }

  void access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    {
      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.id_value.capacity ());
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_image (
        i.id_value,
        size,
        is_null,
        id);
      i.id_null = is_null;
      i.id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.id_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  const char access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::persist_statement[] =
  "INSERT INTO `TransactionTrace` "
  "(`id`, "
  "`scheduled`, "
  "`status`, "
  "`net_usage_words`, "
  "`cpu_usage_us`, "
  "`exception`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::find_statement[] =
  "SELECT "
  "`TransactionTrace`.`id`, "
  "`TransactionTrace`.`scheduled`, "
  "CONCAT(`TransactionTrace`.`status`+0,' ',`TransactionTrace`.`status`), "
  "`TransactionTrace`.`net_usage_words`, "
  "`TransactionTrace`.`cpu_usage_us`, "
  "`TransactionTrace`.`exception` "
  "FROM `TransactionTrace` "
  "WHERE `TransactionTrace`.`id`=?";

  const char access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::update_statement[] =
  "UPDATE `TransactionTrace` "
  "SET "
  "`scheduled`=?, "
  "`status`=?, "
  "`net_usage_words`=?, "
  "`cpu_usage_us`=?, "
  "`exception`=? "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::erase_statement[] =
  "DELETE FROM `TransactionTrace` "
  "WHERE `id`=?";

  const char access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::query_statement[] =
  "SELECT "
  "`TransactionTrace`.`id`, "
  "`TransactionTrace`.`scheduled`, "
  "CONCAT(`TransactionTrace`.`status`+0,' ',`TransactionTrace`.`status`), "
  "`TransactionTrace`.`net_usage_words`, "
  "`TransactionTrace`.`cpu_usage_us`, "
  "`TransactionTrace`.`exception` "
  "FROM `TransactionTrace`";

  const char access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::erase_query_statement[] =
  "DELETE FROM `TransactionTrace`";

  const char access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::table_name[] =
  "`TransactionTrace`";

  void access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::pointer_type
  access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::object_type >
  access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::eosio::TransactionTrace, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // Action
  //

  struct access::object_traits_impl< ::eosio::Action, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::eosio::Action, id_mysql >::id_type
  access::object_traits_impl< ::eosio::Action, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_value (
        id,
        i.global_seq_value,
        i.global_seq_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::eosio::Action, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // global_seq_
    //
    t[0UL] = 0;

    // account_seq_
    //
    t[1UL] = 0;

    // parent_seq_
    //
    t[2UL] = 0;

    // account_
    //
    t[3UL] = 0;

    // name_
    //
    t[4UL] = 0;

    // auth_
    //
    if (t[5UL])
    {
      i.auth_value.capacity (i.auth_size);
      grew = true;
    }

    // data_
    //
    if (t[6UL])
    {
      i.data_value.capacity (i.data_size);
      grew = true;
    }

    // receiver_
    //
    t[7UL] = 0;

    // auth_seq_
    //
    if (t[8UL])
    {
      i.auth_seq_value.capacity (i.auth_seq_size);
      grew = true;
    }

    // code_seq_
    //
    t[9UL] = 0;

    // abi_seq_
    //
    t[10UL] = 0;

    // tx_id_
    //
    if (t[11UL])
    {
      i.tx_id_value.capacity (i.tx_id_size);
      grew = true;
    }

    // console_
    //
    if (t[12UL])
    {
      i.console_value.capacity (i.console_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::eosio::Action, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // global_seq_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.global_seq_value;
      b[n].is_null = &i.global_seq_null;
      n++;
    }

    // account_seq_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.account_seq_value;
    b[n].is_null = &i.account_seq_null;
    n++;

    // parent_seq_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.parent_seq_value;
    b[n].is_null = &i.parent_seq_null;
    n++;

    // account_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.account_value;
    b[n].is_null = &i.account_null;
    n++;

    // name_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.name_value;
    b[n].is_null = &i.name_null;
    n++;

    // auth_
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.auth_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.auth_value.capacity ());
    b[n].length = &i.auth_size;
    b[n].is_null = &i.auth_null;
    n++;

    // data_
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.data_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.data_value.capacity ());
    b[n].length = &i.data_size;
    b[n].is_null = &i.data_null;
    n++;

    // receiver_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.receiver_value;
    b[n].is_null = &i.receiver_null;
    n++;

    // auth_seq_
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.auth_seq_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.auth_seq_value.capacity ());
    b[n].length = &i.auth_seq_size;
    b[n].is_null = &i.auth_seq_null;
    n++;

    // code_seq_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.code_seq_value;
    b[n].is_null = &i.code_seq_null;
    n++;

    // abi_seq_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.abi_seq_value;
    b[n].is_null = &i.abi_seq_null;
    n++;

    // tx_id_
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.tx_id_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.tx_id_value.capacity ());
    b[n].length = &i.tx_id_size;
    b[n].is_null = &i.tx_id_null;
    n++;

    // console_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.console_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.console_value.capacity ());
    b[n].length = &i.console_size;
    b[n].is_null = &i.console_null;
    n++;
  }

  void access::object_traits_impl< ::eosio::Action, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::eosio::Action, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // global_seq_
    //
    if (sk == statement_insert)
    {
      ::uint64_t const& v =
        o.global_seq_;

      bool is_null (false);
      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_image (
        i.global_seq_value, is_null, v);
      i.global_seq_null = is_null;
    }

    // account_seq_
    //
    {
      ::uint64_t const& v =
        o.account_seq_;

      bool is_null (false);
      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_image (
        i.account_seq_value, is_null, v);
      i.account_seq_null = is_null;
    }

    // parent_seq_
    //
    {
      ::uint64_t const& v =
        o.parent_seq_;

      bool is_null (false);
      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_image (
        i.parent_seq_value, is_null, v);
      i.parent_seq_null = is_null;
    }

    // account_
    //
    {
      ::eosio::name_t const& v =
        o.account_;

      bool is_null (false);
      mysql::value_traits<
          ::eosio::name_t,
          mysql::id_ulonglong >::set_image (
        i.account_value, is_null, v);
      i.account_null = is_null;
    }

    // name_
    //
    {
      ::eosio::name_t const& v =
        o.name_;

      bool is_null (false);
      mysql::value_traits<
          ::eosio::name_t,
          mysql::id_ulonglong >::set_image (
        i.name_value, is_null, v);
      i.name_null = is_null;
    }

    // auth_
    //
    {
      ::odb::nullable< ::std::vector< char > > const& v =
        o.auth_;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.auth_value.capacity ());
      mysql::value_traits<
          ::odb::nullable< ::std::vector< char > >,
          mysql::id_blob >::set_image (
        i.auth_value,
        size,
        is_null,
        v);
      i.auth_null = is_null;
      i.auth_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.auth_value.capacity ());
    }

    // data_
    //
    {
      ::eosio::bytes const& v =
        o.data_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.data_value.capacity ());
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_image (
        i.data_value,
        size,
        is_null,
        v);
      i.data_null = is_null;
      i.data_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.data_value.capacity ());
    }

    // receiver_
    //
    {
      ::eosio::name_t const& v =
        o.receiver_;

      bool is_null (false);
      mysql::value_traits<
          ::eosio::name_t,
          mysql::id_ulonglong >::set_image (
        i.receiver_value, is_null, v);
      i.receiver_null = is_null;
    }

    // auth_seq_
    //
    {
      ::odb::nullable< ::std::vector< char > > const& v =
        o.auth_seq_;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.auth_seq_value.capacity ());
      mysql::value_traits<
          ::odb::nullable< ::std::vector< char > >,
          mysql::id_blob >::set_image (
        i.auth_seq_value,
        size,
        is_null,
        v);
      i.auth_seq_null = is_null;
      i.auth_seq_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.auth_seq_value.capacity ());
    }

    // code_seq_
    //
    {
      unsigned int const& v =
        o.code_seq_;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.code_seq_value, is_null, v);
      i.code_seq_null = is_null;
    }

    // abi_seq_
    //
    {
      unsigned int const& v =
        o.abi_seq_;

      bool is_null (false);
      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_image (
        i.abi_seq_value, is_null, v);
      i.abi_seq_null = is_null;
    }

    // tx_id_
    //
    {
      ::eosio::bytes const& v =
        o.tx_id_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.tx_id_value.capacity ());
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_image (
        i.tx_id_value,
        size,
        is_null,
        v);
      i.tx_id_null = is_null;
      i.tx_id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.tx_id_value.capacity ());
    }

    // console_
    //
    {
      ::odb::nullable< ::std::basic_string< char > > const& v =
        o.console_;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.console_value.capacity ());
      mysql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          mysql::id_string >::set_image (
        i.console_value,
        size,
        is_null,
        v);
      i.console_null = is_null;
      i.console_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.console_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::eosio::Action, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // global_seq_
    //
    {
      ::uint64_t& v =
        o.global_seq_;

      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.global_seq_value,
        i.global_seq_null);
    }

    // account_seq_
    //
    {
      ::uint64_t& v =
        o.account_seq_;

      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.account_seq_value,
        i.account_seq_null);
    }

    // parent_seq_
    //
    {
      ::uint64_t& v =
        o.parent_seq_;

      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.parent_seq_value,
        i.parent_seq_null);
    }

    // account_
    //
    {
      ::eosio::name_t& v =
        o.account_;

      mysql::value_traits<
          ::eosio::name_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.account_value,
        i.account_null);
    }

    // name_
    //
    {
      ::eosio::name_t& v =
        o.name_;

      mysql::value_traits<
          ::eosio::name_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.name_value,
        i.name_null);
    }

    // auth_
    //
    {
      ::odb::nullable< ::std::vector< char > >& v =
        o.auth_;

      mysql::value_traits<
          ::odb::nullable< ::std::vector< char > >,
          mysql::id_blob >::set_value (
        v,
        i.auth_value,
        i.auth_size,
        i.auth_null);
    }

    // data_
    //
    {
      ::eosio::bytes& v =
        o.data_;

      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_value (
        v,
        i.data_value,
        i.data_size,
        i.data_null);
    }

    // receiver_
    //
    {
      ::eosio::name_t& v =
        o.receiver_;

      mysql::value_traits<
          ::eosio::name_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.receiver_value,
        i.receiver_null);
    }

    // auth_seq_
    //
    {
      ::odb::nullable< ::std::vector< char > >& v =
        o.auth_seq_;

      mysql::value_traits<
          ::odb::nullable< ::std::vector< char > >,
          mysql::id_blob >::set_value (
        v,
        i.auth_seq_value,
        i.auth_seq_size,
        i.auth_seq_null);
    }

    // code_seq_
    //
    {
      unsigned int& v =
        o.code_seq_;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.code_seq_value,
        i.code_seq_null);
    }

    // abi_seq_
    //
    {
      unsigned int& v =
        o.abi_seq_;

      mysql::value_traits<
          unsigned int,
          mysql::id_ulong >::set_value (
        v,
        i.abi_seq_value,
        i.abi_seq_null);
    }

    // tx_id_
    //
    {
      ::eosio::bytes& v =
        o.tx_id_;

      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_value (
        v,
        i.tx_id_value,
        i.tx_id_size,
        i.tx_id_null);
    }

    // console_
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.console_;

      mysql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          mysql::id_string >::set_value (
        v,
        i.console_value,
        i.console_size,
        i.console_null);
    }
  }

  void access::object_traits_impl< ::eosio::Action, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::eosio::Action, id_mysql >::persist_statement[] =
  "INSERT INTO `Action` "
  "(`global_seq`, "
  "`account_seq`, "
  "`parent_seq`, "
  "`account`, "
  "`name`, "
  "`auth`, "
  "`data`, "
  "`receiver`, "
  "`auth_seq`, "
  "`code_seq`, "
  "`abi_seq`, "
  "`tx_id`, "
  "`console`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::eosio::Action, id_mysql >::find_statement[] =
  "SELECT "
  "`Action`.`global_seq`, "
  "`Action`.`account_seq`, "
  "`Action`.`parent_seq`, "
  "`Action`.`account`, "
  "`Action`.`name`, "
  "`Action`.`auth`, "
  "`Action`.`data`, "
  "`Action`.`receiver`, "
  "`Action`.`auth_seq`, "
  "`Action`.`code_seq`, "
  "`Action`.`abi_seq`, "
  "`Action`.`tx_id`, "
  "`Action`.`console` "
  "FROM `Action` "
  "WHERE `Action`.`global_seq`=?";

  const char access::object_traits_impl< ::eosio::Action, id_mysql >::update_statement[] =
  "UPDATE `Action` "
  "SET "
  "`account_seq`=?, "
  "`parent_seq`=?, "
  "`account`=?, "
  "`name`=?, "
  "`auth`=?, "
  "`data`=?, "
  "`receiver`=?, "
  "`auth_seq`=?, "
  "`code_seq`=?, "
  "`abi_seq`=?, "
  "`tx_id`=?, "
  "`console`=? "
  "WHERE `global_seq`=?";

  const char access::object_traits_impl< ::eosio::Action, id_mysql >::erase_statement[] =
  "DELETE FROM `Action` "
  "WHERE `global_seq`=?";

  const char access::object_traits_impl< ::eosio::Action, id_mysql >::query_statement[] =
  "SELECT "
  "`Action`.`global_seq`, "
  "`Action`.`account_seq`, "
  "`Action`.`parent_seq`, "
  "`Action`.`account`, "
  "`Action`.`name`, "
  "`Action`.`auth`, "
  "`Action`.`data`, "
  "`Action`.`receiver`, "
  "`Action`.`auth_seq`, "
  "`Action`.`code_seq`, "
  "`Action`.`abi_seq`, "
  "`Action`.`tx_id`, "
  "`Action`.`console` "
  "FROM `Action`";

  const char access::object_traits_impl< ::eosio::Action, id_mysql >::erase_query_statement[] =
  "DELETE FROM `Action`";

  const char access::object_traits_impl< ::eosio::Action, id_mysql >::table_name[] =
  "`Action`";

  void access::object_traits_impl< ::eosio::Action, id_mysql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::eosio::Action, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.global_seq_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::eosio::Action, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::eosio::Action, id_mysql >::pointer_type
  access::object_traits_impl< ::eosio::Action, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::eosio::Action, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::eosio::Action, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.global_seq_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::eosio::Action, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::eosio::Action, id_mysql >::object_type >
  access::object_traits_impl< ::eosio::Action, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::eosio::Action, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::eosio::Action, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::eosio::Action, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }

  // TokenTransfer
  //

  struct access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      mysql::connection&,
      image_type&,
      id_image_type&,
      mysql::binding&,
      mysql::binding&)
    {
    }
  };

  access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::id_type
  access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_value (
        id,
        i.action_global_seq_value,
        i.action_global_seq_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // action_global_seq_
    //
    t[0UL] = 0;

    // symbol_
    //
    if (t[1UL])
    {
      i.symbol_value.capacity (i.symbol_size);
      grew = true;
    }

    // precision_
    //
    t[2UL] = 0;

    // amount_
    //
    t[3UL] = 0;

    // from_
    //
    t[4UL] = 0;

    // to_
    //
    t[5UL] = 0;

    // memo_
    //
    if (t[6UL])
    {
      i.memo_value.capacity (i.memo_size);
      grew = true;
    }

    // tx_id_
    //
    if (t[7UL])
    {
      i.tx_id_value.capacity (i.tx_id_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // action_global_seq_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.action_global_seq_value;
      b[n].is_null = &i.action_global_seq_null;
      n++;
    }

    // symbol_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.symbol_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.symbol_value.capacity ());
    b[n].length = &i.symbol_size;
    b[n].is_null = &i.symbol_null;
    n++;

    // precision_
    //
    b[n].buffer_type = MYSQL_TYPE_TINY;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.precision_value;
    b[n].is_null = &i.precision_null;
    n++;

    // amount_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.amount_value;
    b[n].is_null = &i.amount_null;
    n++;

    // from_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.from_value;
    b[n].is_null = &i.from_null;
    n++;

    // to_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.to_value;
    b[n].is_null = &i.to_null;
    n++;

    // memo_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.memo_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.memo_value.capacity ());
    b[n].length = &i.memo_size;
    b[n].is_null = &i.memo_null;
    n++;

    // tx_id_
    //
    b[n].buffer_type = MYSQL_TYPE_BLOB;
    b[n].buffer = i.tx_id_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.tx_id_value.capacity ());
    b[n].length = &i.tx_id_size;
    b[n].is_null = &i.tx_id_null;
    n++;
  }

  void access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // action_global_seq_
    //
    if (sk == statement_insert)
    {
      ::uint64_t const& v =
        o.action_global_seq_;

      bool is_null (false);
      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_image (
        i.action_global_seq_value, is_null, v);
      i.action_global_seq_null = is_null;
    }

    // symbol_
    //
    {
      ::std::string const& v =
        o.symbol_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.symbol_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.symbol_value,
        size,
        is_null,
        v);
      i.symbol_null = is_null;
      i.symbol_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.symbol_value.capacity ());
    }

    // precision_
    //
    {
      ::uint8_t const& v =
        o.precision_;

      bool is_null (false);
      mysql::value_traits<
          ::uint8_t,
          mysql::id_utiny >::set_image (
        i.precision_value, is_null, v);
      i.precision_null = is_null;
    }

    // amount_
    //
    {
      ::int64_t const& v =
        o.amount_;

      bool is_null (false);
      mysql::value_traits<
          ::int64_t,
          mysql::id_longlong >::set_image (
        i.amount_value, is_null, v);
      i.amount_null = is_null;
    }

    // from_
    //
    {
      ::eosio::name_t const& v =
        o.from_;

      bool is_null (false);
      mysql::value_traits<
          ::eosio::name_t,
          mysql::id_ulonglong >::set_image (
        i.from_value, is_null, v);
      i.from_null = is_null;
    }

    // to_
    //
    {
      ::eosio::name_t const& v =
        o.to_;

      bool is_null (false);
      mysql::value_traits<
          ::eosio::name_t,
          mysql::id_ulonglong >::set_image (
        i.to_value, is_null, v);
      i.to_null = is_null;
    }

    // memo_
    //
    {
      ::odb::nullable< ::std::basic_string< char > > const& v =
        o.memo_;

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.memo_value.capacity ());
      mysql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          mysql::id_string >::set_image (
        i.memo_value,
        size,
        is_null,
        v);
      i.memo_null = is_null;
      i.memo_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.memo_value.capacity ());
    }

    // tx_id_
    //
    {
      ::eosio::bytes const& v =
        o.tx_id_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.tx_id_value.capacity ());
      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_image (
        i.tx_id_value,
        size,
        is_null,
        v);
      i.tx_id_null = is_null;
      i.tx_id_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.tx_id_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // action_global_seq_
    //
    {
      ::uint64_t& v =
        o.action_global_seq_;

      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.action_global_seq_value,
        i.action_global_seq_null);
    }

    // symbol_
    //
    {
      ::std::string& v =
        o.symbol_;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.symbol_value,
        i.symbol_size,
        i.symbol_null);
    }

    // precision_
    //
    {
      ::uint8_t& v =
        o.precision_;

      mysql::value_traits<
          ::uint8_t,
          mysql::id_utiny >::set_value (
        v,
        i.precision_value,
        i.precision_null);
    }

    // amount_
    //
    {
      ::int64_t& v =
        o.amount_;

      mysql::value_traits<
          ::int64_t,
          mysql::id_longlong >::set_value (
        v,
        i.amount_value,
        i.amount_null);
    }

    // from_
    //
    {
      ::eosio::name_t& v =
        o.from_;

      mysql::value_traits<
          ::eosio::name_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.from_value,
        i.from_null);
    }

    // to_
    //
    {
      ::eosio::name_t& v =
        o.to_;

      mysql::value_traits<
          ::eosio::name_t,
          mysql::id_ulonglong >::set_value (
        v,
        i.to_value,
        i.to_null);
    }

    // memo_
    //
    {
      ::odb::nullable< ::std::basic_string< char > >& v =
        o.memo_;

      mysql::value_traits<
          ::odb::nullable< ::std::basic_string< char > >,
          mysql::id_string >::set_value (
        v,
        i.memo_value,
        i.memo_size,
        i.memo_null);
    }

    // tx_id_
    //
    {
      ::eosio::bytes& v =
        o.tx_id_;

      mysql::value_traits<
          ::eosio::bytes,
          mysql::id_blob >::set_value (
        v,
        i.tx_id_value,
        i.tx_id_size,
        i.tx_id_null);
    }
  }

  void access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          ::uint64_t,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::persist_statement[] =
  "INSERT INTO `TokenTransfer` "
  "(`action_global_seq`, "
  "`symbol`, "
  "`precision`, "
  "`amount`, "
  "`from`, "
  "`to`, "
  "`memo`, "
  "`tx_id`) "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::find_statement[] =
  "SELECT "
  "`TokenTransfer`.`action_global_seq`, "
  "`TokenTransfer`.`symbol`, "
  "`TokenTransfer`.`precision`, "
  "`TokenTransfer`.`amount`, "
  "`TokenTransfer`.`from`, "
  "`TokenTransfer`.`to`, "
  "`TokenTransfer`.`memo`, "
  "`TokenTransfer`.`tx_id` "
  "FROM `TokenTransfer` "
  "WHERE `TokenTransfer`.`action_global_seq`=?";

  const char access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::update_statement[] =
  "UPDATE `TokenTransfer` "
  "SET "
  "`symbol`=?, "
  "`precision`=?, "
  "`amount`=?, "
  "`from`=?, "
  "`to`=?, "
  "`memo`=?, "
  "`tx_id`=? "
  "WHERE `action_global_seq`=?";

  const char access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::erase_statement[] =
  "DELETE FROM `TokenTransfer` "
  "WHERE `action_global_seq`=?";

  const char access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::query_statement[] =
  "SELECT "
  "`TokenTransfer`.`action_global_seq`, "
  "`TokenTransfer`.`symbol`, "
  "`TokenTransfer`.`precision`, "
  "`TokenTransfer`.`amount`, "
  "`TokenTransfer`.`from`, "
  "`TokenTransfer`.`to`, "
  "`TokenTransfer`.`memo`, "
  "`TokenTransfer`.`tx_id` "
  "FROM `TokenTransfer`";

  const char access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::erase_query_statement[] =
  "DELETE FROM `TokenTransfer`";

  const char access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::table_name[] =
  "`TokenTransfer`";

  void access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;
    using mysql::update_statement;

    callback (db, obj, callback_event::pre_update);

    mysql::transaction& tr (mysql::transaction::current ());
    mysql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.action_global_seq_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::pointer_type
  access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.action_global_seq_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::object_type >
  access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      static_cast<mysql::connection&> (c));

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    shared_ptr<mysql::prepared_query_impl> r (
      new (shared) mysql::prepared_query_impl (conn));
    r->name = n;
    r->execute = &execute_query;
    r->query = q;
    r->stmt.reset (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        r->query.parameters_binding (),
        imb));

    return r;
  }

  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::eosio::TokenTransfer, id_mysql >::
  execute_query (prepared_query_impl& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::prepared_query_impl& pq (
      static_cast<mysql::prepared_query_impl&> (q));
    shared_ptr<select_statement> st (
      odb::details::inc_ref (
        static_cast<select_statement*> (pq.stmt.get ())));

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    // The connection used by the current transaction and the
    // one used to prepare this statement must be the same.
    //
    assert (&conn == &st->connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    pq.query.init_parameters ();
    st->execute ();

    return shared_ptr<result_impl> (
      new (shared) mysql::object_result_impl<object_type> (
        pq.query, st, sts, 0));
  }
}

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS `TokenTransfer`");
          db.execute ("DROP TABLE IF EXISTS `Action`");
          db.execute ("DROP TABLE IF EXISTS `TransactionTrace`");
          db.execute ("DROP TABLE IF EXISTS `Transaction`");
          db.execute ("DROP TABLE IF EXISTS `Block`");
          db.execute ("DROP TABLE IF EXISTS `Stats`");
          db.execute ("CREATE TABLE IF NOT EXISTS `schema_version` (\n"
                      "  `name` VARCHAR(255) NOT NULL PRIMARY KEY,\n"
                      "  `version` BIGINT UNSIGNED NOT NULL,\n"
                      "  `migration` TINYINT(1) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("DELETE FROM `schema_version`\n"
                      "  WHERE `name` = ''");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE `Stats` (\n"
                      "  `id` INT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `tx_count` BIGINT UNSIGNED NOT NULL,\n"
                      "  `action_count` BIGINT UNSIGNED NOT NULL,\n"
                      "  `context_free_action_count` BIGINT UNSIGNED NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `Block` (\n"
                      "  `id` BINARY(32) NOT NULL PRIMARY KEY,\n"
                      "  `num` INT UNSIGNED NOT NULL,\n"
                      "  `timestamp` DATETIME(6) NULL,\n"
                      "  `block` MEDIUMBLOB NOT NULL,\n"
                      "  `tx_count` INT UNSIGNED NOT NULL,\n"
                      "  `action_count` INT UNSIGNED NOT NULL,\n"
                      "  `context_free_action_count` INT UNSIGNED NOT NULL,\n"
                      "  `created_at` DATETIME(6) NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `num_i`\n"
                      "  ON `Block` (`num`)");
          db.execute ("CREATE INDEX `timestamp_i`\n"
                      "  ON `Block` (`timestamp`)");
          db.execute ("CREATE INDEX `created_at_i`\n"
                      "  ON `Block` (`created_at`)");
          db.execute ("CREATE TABLE `Transaction` (\n"
                      "  `id` BINARY(32) NOT NULL PRIMARY KEY,\n"
                      "  `block_id` BINARY(32) NOT NULL,\n"
                      "  `block_num` INT UNSIGNED NOT NULL,\n"
                      "  `block_time` DATETIME(6) NULL,\n"
                      "  `block_seq` SMALLINT UNSIGNED NOT NULL,\n"
                      "  `action_count` INT UNSIGNED NOT NULL,\n"
                      "  `context_free_action_count` INT UNSIGNED NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `block_id_i`\n"
                      "  ON `Transaction` (`block_id`)");
          db.execute ("CREATE INDEX `block_num_seq_i`\n"
                      "  ON `Transaction` (\n"
                      "    `block_num`,\n"
                      "    `block_seq`)");
          db.execute ("CREATE INDEX `block_time_i`\n"
                      "  ON `Transaction` (`block_time`)");
          db.execute ("CREATE TABLE `TransactionTrace` (\n"
                      "  `id` BINARY(32) NOT NULL PRIMARY KEY,\n"
                      "  `scheduled` TINYINT(1) NOT NULL,\n"
                      "  `status` ENUM('executed', 'soft_fail', 'hard_fail', 'delayed', 'expired', 'unknown') NOT NULL,\n"
                      "  `net_usage_words` INT UNSIGNED NOT NULL,\n"
                      "  `cpu_usage_us` INT UNSIGNED NOT NULL,\n"
                      "  `exception` TEXT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `status_i`\n"
                      "  ON `TransactionTrace` (`status`)");
          db.execute ("CREATE TABLE `Action` (\n"
                      "  `global_seq` BIGINT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `account_seq` BIGINT UNSIGNED NOT NULL,\n"
                      "  `parent_seq` BIGINT UNSIGNED NOT NULL,\n"
                      "  `account` BIGINT UNSIGNED NOT NULL,\n"
                      "  `name` BIGINT UNSIGNED NOT NULL,\n"
                      "  `auth` BLOB NULL,\n"
                      "  `data` MEDIUMBLOB NOT NULL,\n"
                      "  `receiver` BIGINT UNSIGNED NOT NULL,\n"
                      "  `auth_seq` BLOB NULL,\n"
                      "  `code_seq` INT UNSIGNED NOT NULL,\n"
                      "  `abi_seq` INT UNSIGNED NOT NULL,\n"
                      "  `tx_id` BINARY(32) NOT NULL,\n"
                      "  `console` TEXT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `account_seq_i`\n"
                      "  ON `Action` (`account_seq`)");
          db.execute ("CREATE INDEX `parent_seq_i`\n"
                      "  ON `Action` (`parent_seq`)");
          db.execute ("CREATE INDEX `account_i`\n"
                      "  ON `Action` (`account`)");
          db.execute ("CREATE INDEX `name_i`\n"
                      "  ON `Action` (`name`)");
          db.execute ("CREATE INDEX `receiver_i`\n"
                      "  ON `Action` (`receiver`)");
          db.execute ("CREATE INDEX `tx_id_i`\n"
                      "  ON `Action` (`tx_id`)");
          db.execute ("CREATE TABLE `TokenTransfer` (\n"
                      "  `action_global_seq` BIGINT UNSIGNED NOT NULL PRIMARY KEY,\n"
                      "  `symbol` VARCHAR(8) NOT NULL,\n"
                      "  `precision` TINYINT UNSIGNED NOT NULL,\n"
                      "  `amount` BIGINT NOT NULL,\n"
                      "  `from` BIGINT UNSIGNED NOT NULL,\n"
                      "  `to` BIGINT UNSIGNED NOT NULL,\n"
                      "  `memo` TEXT NULL,\n"
                      "  `tx_id` BINARY(32) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `symbol_i`\n"
                      "  ON `TokenTransfer` (`symbol`)");
          db.execute ("CREATE INDEX `from_i`\n"
                      "  ON `TokenTransfer` (`from`)");
          db.execute ("CREATE INDEX `to_i`\n"
                      "  ON `TokenTransfer` (`to`)");
          db.execute ("CREATE INDEX `tx_id_i`\n"
                      "  ON `TokenTransfer` (`tx_id`)");
          return true;
        }
        case 2:
        {
          db.execute ("CREATE TABLE IF NOT EXISTS `schema_version` (\n"
                      "  `name` VARCHAR(255) NOT NULL PRIMARY KEY,\n"
                      "  `version` BIGINT UNSIGNED NOT NULL,\n"
                      "  `migration` TINYINT(1) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("INSERT IGNORE INTO `schema_version` (\n"
                      "  `name`, `version`, `migration`)\n"
                      "  VALUES ('', 1, 0)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_mysql,
    "",
    &create_schema);

  static const schema_catalog_migrate_entry
  migrate_schema_entry_1_ (
    id_mysql,
    "",
    1ULL,
    0);
}

#include <odb/post.hxx>
