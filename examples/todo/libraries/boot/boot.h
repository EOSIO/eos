#pragma once

#include <eosio/eosio.hpp>
#include <eosio/privileged.hpp>
#include "../macros.h"

namespace boot {

class [[eosio::contract("boot")]] boot_contract : public eosio::contract {
  public:
    using contract::contract;

    [[eosio::action]] void boot() {
        // clang-format off
        static const unsigned char kv_database[]                      = {0x82, 0x5e, 0xe6, 0x28, 0x8f, 0xb1, 0x37, 0x3e, 0xab, 0x1b, 0x51, 0x87, 0xec, 0x2f, 0x04, 0xf6, 0xea, 0xcb, 0x39, 0xcb, 0x3a, 0x97, 0xf3, 0x56, 0xa0, 0x7c, 0x91, 0x62, 0x2d, 0xd6, 0x1d, 0x16};
        static const unsigned char action_return_value[]              = {0xc3, 0xa6, 0x13, 0x8c, 0x50, 0x61, 0xcf, 0x29, 0x13, 0x10, 0x88, 0x7c, 0x0b, 0x5c, 0x71, 0xfc, 0xaf, 0xfe, 0xab, 0x90, 0xd5, 0xde, 0xb5, 0x0d, 0x3b, 0x9e, 0x68, 0x7c, 0xea, 0xd4, 0x50, 0x71};
        static const unsigned char ram_restrictions[]                 = {0x4e, 0x7b, 0xf3, 0x48, 0xda, 0x00, 0xa9, 0x45, 0x48, 0x9b, 0x2a, 0x68, 0x17, 0x49, 0xeb, 0x56, 0xf5, 0xde, 0x00, 0xb9, 0x00, 0x01, 0x4e, 0x13, 0x7d, 0xda, 0xe3, 0x9f, 0x48, 0xf6, 0x9d, 0x67};
        static const unsigned char get_sender[]                       = {0xf0, 0xaf, 0x56, 0xd2, 0xc5, 0xa4, 0x8d, 0x60, 0xa4, 0xa5, 0xb5, 0xc9, 0x03, 0xed, 0xfb, 0x7d, 0xb3, 0xa7, 0x36, 0xa9, 0x4e, 0xd5, 0x89, 0xd0, 0xb7, 0x97, 0xdf, 0x33, 0xff, 0x9d, 0x3e, 0x1d};
        static const unsigned char forward_setcode[]                  = {0x26, 0x52, 0xf5, 0xf9, 0x60, 0x06, 0x29, 0x41, 0x09, 0xb3, 0xdd, 0x0b, 0xbd, 0xe6, 0x36, 0x93, 0xf5, 0x53, 0x24, 0xaf, 0x45, 0x2b, 0x79, 0x9e, 0xe1, 0x37, 0xa8, 0x1a, 0x90, 0x5e, 0xed, 0x25};
        static const unsigned char only_bill_first_authorizer[]       = {0x8b, 0xa5, 0x2f, 0xe7, 0xa3, 0x95, 0x6c, 0x5c, 0xd3, 0xa6, 0x56, 0xa3, 0x17, 0x4b, 0x93, 0x1d, 0x3b, 0xb2, 0xab, 0xb4, 0x55, 0x78, 0xbe, 0xfc, 0x59, 0xf2, 0x83, 0xec, 0xd8, 0x16, 0xa4, 0x05};
        static const unsigned char restrict_action_to_self[]          = {0xad, 0x9e, 0x3d, 0x8f, 0x65, 0x06, 0x87, 0x70, 0x9f, 0xd6, 0x8f, 0x4b, 0x90, 0xb4, 0x1f, 0x7d, 0x82, 0x5a, 0x36, 0x5b, 0x02, 0xc2, 0x3a, 0x63, 0x6c, 0xef, 0x88, 0xac, 0x2a, 0xc0, 0x0c, 0x43};
        static const unsigned char disallow_empty_producer_schedule[] = {0x68, 0xdc, 0xaa, 0x34, 0xc0, 0x51, 0x7d, 0x19, 0x66, 0x6e, 0x6b, 0x33, 0xad, 0xd6, 0x73, 0x51, 0xd8, 0xc5, 0xf6, 0x9e, 0x99, 0x9c, 0xa1, 0xe3, 0x79, 0x31, 0xbc, 0x41, 0x0a, 0x29, 0x74, 0x28};
        static const unsigned char fix_linkauth_restriction[]         = {0xe0, 0xfb, 0x64, 0xb1, 0x08, 0x5c, 0xc5, 0x53, 0x89, 0x70, 0x15, 0x8d, 0x05, 0xa0, 0x09, 0xc2, 0x4e, 0x27, 0x6f, 0xb9, 0x4e, 0x1a, 0x0b, 0xf6, 0xa5, 0x28, 0xb4, 0x8f, 0xbc, 0x4f, 0xf5, 0x26};
        static const unsigned char replace_deferred[]                 = {0xef, 0x43, 0x11, 0x2c, 0x65, 0x43, 0xb8, 0x8d, 0xb2, 0x28, 0x3a, 0x2e, 0x07, 0x72, 0x78, 0xc3, 0x15, 0xae, 0x2c, 0x84, 0x71, 0x9a, 0x8b, 0x25, 0xf2, 0x5c, 0xc8, 0x85, 0x65, 0xfb, 0xea, 0x99};
        static const unsigned char no_duplicate_deferred_id[]         = {0x4a, 0x90, 0xc0, 0x0d, 0x55, 0x45, 0x4d, 0xc5, 0xb0, 0x59, 0x05, 0x5c, 0xa2, 0x13, 0x57, 0x9c, 0x6e, 0xa8, 0x56, 0x96, 0x77, 0x12, 0xa5, 0x60, 0x17, 0x48, 0x78, 0x86, 0xa4, 0xd4, 0xcc, 0x0f};
        static const unsigned char only_link_to_existing_permission[] = {0x1a, 0x99, 0xa5, 0x9d, 0x87, 0xe0, 0x6e, 0x09, 0xec, 0x5b, 0x02, 0x8a, 0x9c, 0xbb, 0x77, 0x49, 0xb4, 0xa5, 0xad, 0x88, 0x19, 0x00, 0x43, 0x65, 0xd0, 0x2d, 0xc4, 0x37, 0x9a, 0x8b, 0x72, 0x41};
        static const unsigned char configurable_wasm_limits[]         = {0xbf, 0x61, 0x53, 0x7f, 0xd2, 0x1c, 0x61, 0xa6, 0x0e, 0x54, 0x2a, 0x5d, 0x66, 0xc3, 0xf6, 0xa7, 0x8d, 0xa0, 0x58, 0x93, 0x36, 0x86, 0x83, 0x07, 0xf9, 0x4a, 0x82, 0xbc, 0xce, 0xa8, 0x4e, 0x88};
        // clang-format on

        auto activate = [](const eosio::checksum256& feature) {
            if (!is_feature_activated(feature))
                preactivate_feature(feature);
        };

        require_auth(get_self());
        activate(kv_database);
        activate(action_return_value);
        activate(ram_restrictions);
        activate(get_sender);
        activate(forward_setcode);
        activate(only_bill_first_authorizer);
        activate(restrict_action_to_self);
        activate(disallow_empty_producer_schedule);
        activate(fix_linkauth_restriction);
        activate(replace_deferred);
        activate(no_duplicate_deferred_id);
        activate(only_link_to_existing_permission);
        activate(configurable_wasm_limits);
    }
    using boot_action = eosio::action_wrapper<"boot"_n, &boot_contract::boot>;

    [[eosio::action]] void setcode(eosio::name account, uint8_t vmtype, uint8_t vmversion,
                                   const std::vector<char>& code) {}
    using setcode_action = eosio::action_wrapper<"setcode"_n, &boot_contract::setcode>;

    // Stops periodic onblock from triggering "unknown action"
    [[eosio::action]] void onblock() { require_auth(get_self()); }
}; // boot_contract

EOSIO_DECLARE_ACTIONS(boot_contract, "eosio"_n, //
                      boot, setcode, onblock)

} // namespace boot
