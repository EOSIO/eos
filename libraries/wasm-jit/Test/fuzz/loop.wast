;; Test `loop` opcode

(module
  (func $dummy)

  (func $empty
    (loop)
    (loop $l)
  )

  (func $singular (result i32)
    (loop (nop))
    (loop i32 (i32.const 7))
  )

  (func $multi (result i32)
    (loop (call $dummy) (call $dummy) (call $dummy) (call $dummy))
    (loop i32 (call $dummy) (call $dummy) (call $dummy) (i32.const 8))
  )

  (func $nested (result i32)
    (loop i32
      (loop (call $dummy) (block) (nop))
      (loop i32 (call $dummy) (i32.const 9))
    )
  )

  (func $deep (result i32)
    (loop i32 (block i32 (loop i32 (block i32 (loop i32 (block i32
      (loop i32 (block i32 (loop i32 (block i32 (loop i32 (block i32
        (loop i32 (block i32 (loop i32 (block i32 (loop i32 (block i32
          (loop i32 (block i32 (loop i32 (block i32 (loop i32 (block i32
            (loop i32 (block i32 (loop i32 (block i32 (loop i32 (block i32
              (loop i32 (block i32 (loop i32 (block i32 (loop i32 (block i32
                (loop i32 (block i32 (loop i32 (block i32 (loop i32 (block i32
                  (loop i32 (block i32 (call $dummy) (i32.const 150)))
                ))))))
              ))))))
            ))))))
          ))))))
        ))))))
      ))))))
    ))))))
  )

  (func $as-unary-operand (result i32)
    (i32.ctz (loop i32 (call $dummy) (i32.const 13)))
  )
  (func $as-binary-operand (result i32)
    (i32.mul
      (loop i32 (call $dummy) (i32.const 3))
      (loop i32 (call $dummy) (i32.const 4))
    )
  )
  (func $as-test-operand (result i32)
    (i32.eqz (loop i32 (call $dummy) (i32.const 13)))
  )
  (func $as-compare-operand (result i32)
    (f32.gt
      (loop f32 (call $dummy) (f32.const 3))
      (loop f32 (call $dummy) (f32.const 3))
    )
  )

  (func $break-bare (result i32)
    (block (loop (br 1) (br 0) (unreachable)))
    (block (loop (br_if 1 (i32.const 1)) (unreachable)))
    (block (loop (br_table 1 (i32.const 0)) (unreachable)))
    (block (loop (br_table 1 1 1 (i32.const 1)) (unreachable)))
    (i32.const 19)
  )
  (func $break-value (result i32)
    (block i32 (loop i32 (br 1 (i32.const 18)) (br 0) (i32.const 19)))
  )
  (func $break-repeated (result i32)
    (block i32
      (loop i32
        (br 1 (i32.const 18))
        (br 1 (i32.const 19))
        (drop (br_if 1 (i32.const 20) (i32.const 0)))
        (drop (br_if 1 (i32.const 20) (i32.const 1)))
        (br 1 (i32.const 21))
        (br_table 1 (i32.const 22) (i32.const 0))
        (br_table 1 1 1 (i32.const 23) (i32.const 1))
        (i32.const 21)
      )
    )
  )
  (func $break-inner (result i32)
    (local i32)
    (set_local 0 (i32.const 0))
    (set_local 0 (i32.add (get_local 0) (block i32 (loop i32 (block i32 (br 2 (i32.const 0x1)))))))
    (set_local 0 (i32.add (get_local 0) (block i32 (loop i32 (loop i32 (br 2 (i32.const 0x2)))))))
    (set_local 0 (i32.add (get_local 0) (block i32 (loop i32 (block i32 (loop i32 (br 1 (i32.const 0x4))))))))
    (set_local 0 (i32.add (get_local 0) (block i32 (loop i32 (i32.ctz (br 1 (i32.const 0x8)))))))
    (set_local 0 (i32.add (get_local 0) (block i32 (loop i32 (i32.ctz (loop i32 (br 2 (i32.const 0x10))))))))
    (get_local 0)
  )
  (func $cont-inner (result i32)
    (local i32)
    (set_local 0 (i32.const 0))
    (set_local 0 (i32.add (get_local 0) (loop i32 (loop i32 (br 1)))))
    (set_local 0 (i32.add (get_local 0) (loop i32 (i32.ctz (br 0)))))
    (set_local 0 (i32.add (get_local 0) (loop i32 (i32.ctz (loop i32 (br 1))))))
    (get_local 0)
  )

  (func $effects (result i32)
    (local i32)
    (block
      (loop
        (set_local 0 (i32.const 1))
        (set_local 0 (i32.mul (get_local 0) (i32.const 3)))
        (set_local 0 (i32.sub (get_local 0) (i32.const 5)))
        (set_local 0 (i32.mul (get_local 0) (i32.const 7)))
        (br 1)
        (set_local 0 (i32.mul (get_local 0) (i32.const 100)))
      )
    )
    (i32.eq (get_local 0) (i32.const -14))
  )

  (func $while (param i64) (result i64)
    (local i64)
    (set_local 1 (i64.const 1))
    (block
      (loop
        (br_if 1 (i64.eqz (get_local 0)))
        (set_local 1 (i64.mul (get_local 0) (get_local 1)))
        (set_local 0 (i64.sub (get_local 0) (i64.const 1)))
        (br 0)
      )
    )
    (get_local 1)
  )

  (func $for (param i64) (result i64)
    (local i64 i64)
    (set_local 1 (i64.const 1))
    (set_local 2 (i64.const 2))
    (block
      (loop
        (br_if 1 (i64.gt_u (get_local 2) (get_local 0)))
        (set_local 1 (i64.mul (get_local 1) (get_local 2)))
        (set_local 2 (i64.add (get_local 2) (i64.const 1)))
        (br 0)
      )
    )
    (get_local 1)
  )

  (func $nesting (param f32 f32) (result f32)
    (local f32 f32)
    (block
      (loop
        (br_if 1 (f32.eq (get_local 0) (f32.const 0)))
        (set_local 2 (get_local 1))
        (block
          (loop
            (br_if 1 (f32.eq (get_local 2) (f32.const 0)))
            (br_if 3 (f32.lt (get_local 2) (f32.const 0)))
            (set_local 3 (f32.add (get_local 3) (get_local 2)))
            (set_local 2 (f32.sub (get_local 2) (f32.const 2)))
            (br 0)
          )
        )
        (set_local 3 (f32.div (get_local 3) (get_local 0)))
        (set_local 0 (f32.sub (get_local 0) (f32.const 1)))
        (br 0)
      )
    )
    (get_local 3)
  )

  (func (export "main")
    (call $empty)
    (drop (call $singular))
    (drop (call $multi))
    (drop (call $nested))
    (drop (call $deep))
    (drop (call $as-unary-operand))
    (drop (call $as-binary-operand))
    (drop (call $as-test-operand))
    (drop (call $as-compare-operand))
    (drop (call $break-bare))
    (drop (call $break-value))
    (drop (call $break-repeated))
    (drop (call $break-inner))
    (drop (call $effects))
    (drop (call $while (i64.const 0)))
    (drop (call $while (i64.const 1)))
    (drop (call $while (i64.const 2)))
    (drop (call $while (i64.const 3)))
    (drop (call $while (i64.const 5)))
    (drop (call $while (i64.const 20)))
    (drop (call $for (i64.const 0)))
    (drop (call $for (i64.const 1)))
    (drop (call $for (i64.const 2)))
    (drop (call $for (i64.const 3)))
    (drop (call $for (i64.const 5)))
    (drop (call $for (i64.const 20)))
    (drop (call $nesting (f32.const 0) (f32.const 7)))
    (drop (call $nesting (f32.const 7) (f32.const 0)))
    (drop (call $nesting (f32.const 1) (f32.const 1)))
    (drop (call $nesting (f32.const 1) (f32.const 2)))
    (drop (call $nesting (f32.const 1) (f32.const 3)))
    (drop (call $nesting (f32.const 1) (f32.const 4)))
    (drop (call $nesting (f32.const 1) (f32.const 20)))
    (drop (call $nesting (f32.const 1) (f32.const 21)))
    (drop (call $nesting (f32.const 2) (f32.const 1)))
    (drop (call $nesting (f32.const 3) (f32.const 1)))
    (drop (call $nesting (f32.const 10) (f32.const 1)))
    (drop (call $nesting (f32.const 2) (f32.const 2)))
    (drop (call $nesting (f32.const 2) (f32.const 3)))
    (drop (call $nesting (f32.const 7) (f32.const 4)))
    (drop (call $nesting (f32.const 7) (f32.const 20)))
    (drop (call $nesting (f32.const 7) (f32.const 21)))
    )
)